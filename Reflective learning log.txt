Key questions you should try to answer in your learning log are as follows.

What did I learn about the mathematical algorithms? I.e., solving boundary value problems, numerical ill-conditioning, etc.

What did I learn about software engineering? How have I progressed in my abilities?

What are the short-term implications of what I've learnt? (When will it be useful?)

What are the long-term implications of what I've learnt? (When will it be useful?)

What would I have done differently if I started the unit over again?

What will I do differently in the future?



---------- Shooting Implementation -----------
Done as a function from the start
Implemented shootinng without a phase condition (didn't converge)
Then included the phase condition to allow the period to be found


---------- Finite Difference Implementation -----------
11/08/2021 Was trying to do A_FE**mt which was causing massive errors due to the finite precision floating point arithmetic.
	   Implemented the iterative A_FE multiplication step. Then changed the initial condition assignment from a "for" loop to a vector operation.
	   Then modularised the code into functions.
12/08/2021 Implemented the BE method. 
	   Probably should have done it outside of the FE defined functions then integrated it as would have been good to store that progress in git. 
	   Will make sure to do that for CN scheme. Already changed the stepping matrix creation function to create the CN matrices. Seems to all work ok but need to be more rigorous with git commits.
	   Aim is to make each method run just by changing a "method_name" variable from 'FE' to 'BE' or 'CN'.

	   Implemented the CN method.
	   Done as a global function. Next step to modularise.

	   Modularised the CN method.
	   Next step to create a function to run the matrix creation and finite_difference iterator depending on the method name.

	   Function created to run the matrix creation and FD iterator. Changed the names of some of the global variables to check there were no global variables called in the functions.
15/08/2021 Adapted the numerical shooting code so that the phase condition can be passed to the shooting function. Previously it was defined as dxdt(0,u0)=0 but now can be input as any function.
	   Included the internal function G(g_u0_T) within the numerical shooting function to improve readability. Previously there was a lambda function within a lambda function which was quite hard to decipher.
	   Combined the shooting and finite differences code into one file and documented all of the functions. 
	   Should have committed the phase condition change in git before implementing the G function however it would not be too hard to unpick the changes from each other/manually revert to the multiple lambda functions.
	   Created README.md in GitHub, pulled to local directory (to try "git pull").
	   Started developing a unittest Class to test Shooting function.
21/08/2021 Get FE and BE methods to define matrix B as "None" and then have a single return for the matrix creation function. 
	   Allows the run_finite_differences to avoid an if loop as the method_name variable means that B can be input as None for the FE and BE methods.
	   
	   Moved the Hopf bifurcation normal form into the software package.
	   Increasing the number of demonstrations in the courseworkSoftwareRun file to include Hopf bifurcation.